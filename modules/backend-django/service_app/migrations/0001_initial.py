# Generated by Django 5.2.5 on 2025-08-13 18:53

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Block",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=128, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "block",
            },
        ),
        migrations.CreateModel(
            name="Driver",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("first_name", models.CharField(max_length=128)),
                ("last_name", models.CharField(max_length=128)),
                ("license_plate", models.CharField(max_length=32)),
                ("date_of_birth", models.DateField()),
            ],
            options={
                "db_table": "driver",
            },
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=128)),
                ("sku", models.CharField(max_length=64, unique=True)),
            ],
            options={
                "db_table": "product",
            },
        ),
        migrations.CreateModel(
            name="Order",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("code", models.CharField(max_length=64, unique=True)),
                ("origin", models.CharField(max_length=255)),
                ("destination", models.CharField(max_length=255)),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                ("dispatch_date", models.DateTimeField(blank=True, null=True)),
                ("user", models.CharField(max_length=128, blank=True, null=True)),
                (
                    "volume",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Cubic volume",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "weight",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Weight in kilograms",
                        max_digits=10,
                        null=True,
                    ),
                ),
                ("incidents", models.TextField(blank=True, null=True)),
                ("number_of_bags", models.PositiveIntegerField(default=0)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("COMPLETED", "Completed"),
                            ("PENDING", "Pending"),
                            ("REJECTED", "Rejected"),
                            ("DELIVERED", "Delivered"),
                            ("READY_TO_SHIP", "Ready to ship"),
                            ("IN_DISPATCH", "In dispatch"),
                            ("APPROVED", "Approved"),
                            ("READY_TO_DELIVER", "Ready to deliver"),
                        ],
                        default="PENDING",
                        max_length=32,
                    ),
                ),
                (
                    "block",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="orders",
                        to="service_app.block",
                    ),
                ),
                (
                    "driver",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="orders",
                        to="service_app.driver",
                    ),
                ),
                (
                    "products",
                    models.ManyToManyField(
                        blank=True, related_name="orders", to="service_app.product"
                    ),
                ),
            ],
            options={
                "db_table": "order",
            },
        ),
    ]
